Test Cases
==========
1. Configurable
(x) 1.1. Load via Constructor  
  - create new class and derive from Configurable
  - Check if sample config is loaded correctly
(x) 1.2 Load via load_conf
  - create new class, use load_conf
  - check if sample config is loaded correctly
(x) 1.3 Load via load_conf_file
  - create new Configurable Class, use load_conf_file to load sample config
  - check if sample config is loaded correctly

2. Configurator
2.1 Populate a parser
  - see if a argparse object is extended
2.2 Eval a parser
  - check if a config file can be loaded via command line
  - check if logging.basicConfig is set
2.3 Check generate_unique
  - check if generate_unique returns the same value for two distinct
    objects with same configuration
2.4 Configure two distinct objects
  - see if configuration is the same for both

3. auto_amqp
3.1 generate a new object
  - see if default config is loaded
  - see if the config is loaded under the correct tree
3.2 create a connection (using a working amqp server, no exchanges)
  - check if the application does not crash
  - close connection
3.2 create object with input exchange set and one with output set
  - send a simple message, check if it arrived
3.3 check if parser is populated correctly
3.4 check if parser is evaluated correctly
  - check host,port,vhost

4. multi_amqp
same as auto_amqp but
4.2 generate both objects at the same time with multi_amqp
  - check if both objects are generated correctly
  - send a message and check output

5 MongoConnect
5.1 Create a new object 
  - see if default config is loaded correctly
  - see if it is loaded under the correct tree
5.2 Try to connect to mongodb
  - close connection afterwards
5.3 Connect to db and write something in the database, close it, open it
  - then see if the written object is still there
5.4 Write in the database, close it, drop the connection next time and open
  - see if it worked
5.5 check if populate_parser worked
5.6 check if eval_parser worked
  

